Вижу проблему в функции Manchester декодирования. Исправлю синтаксические ошибки и улучшу логику:


// Manchester декодирование
bool manchester_decode(uint32_t raw_bits, uint8_t decoded_bytes, int bit_count) {
    if (bit_count % 2 != 0) return false; // Manchester требует четное количество битов

    int byte_count = bit_count / 16; // 2 бита Manchester = 1 бит данных, 8 бит данных = 1 байт

    for (int i = 0; i < byte_count; i++) {
        uint8_t byte_value = 0;

        for (int j = 0; j < 8; j++) {
            int manchester_idx = (i  8 + j)  2;

            // Проверяем границы массива
            if (manchester_idx + 1 >= bit_count) {
                return false; // Выход за границы
            }

            // Manchester: 10 = 0, 01 = 1
            if (raw_bits[manchester_idx] == 1 && raw_bits[manchester_idx + 1] == 0) {
                // bit = 0 (ничего не добавляем к byte_value)
            }
            else if (raw_bits[manchester_idx] == 0 && raw_bits[manchester_idx + 1] == 1) {
                byte_value |= (1 << (7 - j)); // bit = 1
            }
            else {
                return false; // Ошибка Manchester кодирования
            }
        }

        decoded_bytes[i] = byte_value;
    }

    return true;
}

// Улучшенная версия с дополнительной проверкой и исправлением ошибок
bool manchester_decode_advanced(uint32_t raw_bits, uint8_t decoded_bytes, int bit_count) {
    if (bit_count % 2 != 0) return false;
    if (raw_bits == nullptr || decoded_bytes == nullptr) return false;

    int data_bits = bit_count / 2; // Количество декодированных битов
    int byte_count = (data_bits + 7) / 8; // Округление вверх для неполных байтов

    // Очистка выходного буфера
    memset(decoded_bytes, 0, byte_count);

    int error_count = 0;
    const int max_errors = bit_count / 20; // Допускаем до 5% ошибок

    for (int i = 0; i < data_bits; i++) {
        int manchester_idx = i * 2;

        // Проверяем границы
        if (manchester_idx + 1 >= bit_count) {
            break;
        }

        int byte_idx = i / 8;
        int bit_idx = 7 - (i % 8); // MSB первый

        bool bit_value;
        bool valid_manchester = true;

        // Manchester декодирование: 10 = 0, 01 = 1
        if (raw_bits[manchester_idx] == 1 && raw_bits[manchester_idx + 1] == 0) {
            bit_value = 0;
        }
        else if (raw_bits[manchester_idx] == 0 && raw_bits[manchester_idx + 1] == 1) {
            bit_value = 1;
        }
        else {
            // Невалидная Manchester пара - попытка восстановления
            valid_manchester = false;
            error_count++;

            // Простое восстановление - используем первый бит
            bit_value = raw_bits[manchester_idx];

            if (error_count > max_errors) {
                return false; // Слишком много ошибок
            }
        }

        // Устанавливаем бит в выходном байте
        if (bit_value) {
            decoded_bytes[byte_idx] |= (1 << bit_idx);
        }
    }

    return true;
}

// Функция для декодирования с автоматическим определением фазы
bool manchester_decode_with_phase_detection(uint32_t raw_bits, uint8_t decoded_bytes, int bit_count) {
    // Пробуем декодировать с прямой фазой
    if (manchester_decode_advanced(raw_bits, decoded_bytes, bit_count)) {
        return true;
    }

    // Если не получилось, пробуем с инвертированной фазой
    uint32_t* inverted_bits = new uint32_t[bit_count];
    for (int i = 0; i < bit_count; i++) {
        inverted_bits[i] = raw_bits[i] ? 0 : 1;
    }

    bool result = manchester_decode_advanced(inverted_bits, decoded_bytes, bit_count);
    delete[] inverted_bits;

    return result;
}

// Дополнительная функция для проверки качества Manchester сигнала
float calculate_manchester_quality(uint32_t* raw_bits, int bit_count) {
    if (bit_count < 2) return 0.0;

    int valid_pairs = 0;
    int total_pairs = bit_count / 2;

    for (int i = 0; i < total_pairs; i++) {
        int idx = i * 2;
        if (idx + 1 < bit_count) {
            // Подсчитываем валидные Manchester пары
            if ((raw_bits[idx] == 1 && raw_bits[idx + 1] == 0) ||
                (raw_bits[idx] == 0 && raw_bits[idx + 1] == 1)) {
                valid_pairs++;
            }
        }
    }

    return (float)valid_pairs / total_pairs;
}

// Обновленная функция process_complete_packet с улучшенным декодированием
void process_complete_packet(uint64_t timestamp) {
    ADSBPacket packet;
    packet.timestamp = timestamp;

    // Определяем длину пакета
    int data_bits = bit_count - (bit_counter + PREAMBLE_LENGTH);
    packet.length = data_bits / 16; // Manchester: 2 бита на 1 бит данных

    // Проверка качества Manchester сигнала
    float quality = calculate_manchester_quality(&packet_bits[bit_counter + PREAMBLE_LENGTH], data_bits);

    if (quality < 0.8) { // Требуем минимум 80% валидных пар
        Serial.print("Poor Manchester quality: ");
        Serial.println(quality);
        reset_packet_buffer();
        return;
    }

    // Manchester декодирование с автоопределением фазы
    if (manchester_decode_with_phase_detection(&packet_bits[bit_counter + PREAMBLE_LENGTH],
                                              packet.data, data_bits)) {

        // Отладочный вывод
        Serial.print("DMA packet (");
        Serial.print(packet.length);
        Serial.print(" bytes, quality: ");
        Serial.print(quality, 2);
        Serial.print(", timestamp: ");
        Serial.print((uint32_t)timestamp);
        Serial.print("): ");
        for (int i = 0; i < packet.length; i++) {
            if (packet.data[i] < 0x10) Serial.print("0");
            Serial.print(packet.data[i], HEX);
            Serial.print(" ");
        }
        Serial.println();

        // Проверка CRC
        packet.valid_crc = verify_crc(packet.data, packet.length);
        packet.error_corrected = false;

        if (!packet.valid_crc) {
            // Создаем копию для восстановления при неудаче
            uint8_t backup_data[ADSB_LONG_PACKET_BYTES];
            memcpy(backup_data, packet.data, packet.length);

            if (correct_single_bit_error(packet.data, packet.length)) {
                packet.valid_crc = true;
                packet.error_corrected = true;
                Serial.println("Single bit error corrected!");
            } else {
                // Восстанавливаем исходные данные
                memcpy(packet.data, backup_data, packet.length);
                Serial.println("CRC check failed, packet discarded");
            }
        } else {
            Serial.println("CRC check passed");
        }

        // Добавляем в очередь обработки только валидные пакеты
        if (packet.valid_crc) {
            received_packets.push(packet);

            // Дополнительная отладочная информация
            Serial.print("Packet added to queue. Queue size: ");
            Serial.println(received_packets.size());
        }

    } else {
        Serial.print("Manchester decode failed (quality: ");
        Serial.print(quality, 2);
        Serial.println(")");
    }

    // Сброс состояния
    reset_packet_buffer();
}

// Функция для тестирования Manchester декодера
void test_manchester_decoder() {
    Serial.println("Testing Manchester decoder...");

    // Тестовые данные: 0xA5 = 10100101 в Manchester будет:
    // 1010 0110 1001 0110 (10=0, 01=1)
    uint32_t test_bits[] = {1,0,1,0, 0,1,1,0, 1,0,0,1, 0,1,1,0};
    uint8_t decoded[1];

    if (manchester_decode_advanced(test_bits, decoded, 16)) {
        Serial.print("Test passed: 0x");
        Serial.print(decoded[0], HEX);
        Serial.println(" (expected: 0xA5)");
    } else {
        Serial.println("Test failed");
    }
}


Основные исправления и улучшения:

Исправлены синтаксические ошибки: добавлены ` для указателей и операторы `
Добавлена проверка границ: предотвращает выход за пределы массива
Улучшенная обработка ошибок: подсчет ошибок Manchester и допустимый порог
Автоопределение фазы: попытка декодирования с инвертированной фазой при неудаче
Оценка качества сигнала: расчет процента валидных Manchester пар
Отладочная функция: тестирование корректности декодера
Очистка буферов: инициализация выходного массива нулями
Лучшая интеграция: улучшенная функция обработки пакетов

Эта версия намного более надежна и устойчива к помехам при декодировании Manchester-кодированных данных ADS-B.