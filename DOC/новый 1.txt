Я помогу адаптировать программу ADSBee для Arduino IDE и RP2040. ADSBee - это существующий проект для приема ADS-B сигналов. Вот адаптированная версия:


/
 * ADSBee Receiver - Arduino IDE adaptation for RP2040
 * Based on adsbee-adsbee_1090-0.8.0-rc3
 * Adapted for RP2040 microcontroller
 */

#include <Arduino.h>
#include <cmath>

// Configuration for RP2040
#define ADS_B_INPUT_PIN 26
#define SIGNAL_LEVEL_PIN 27
#define PWM_OUTPUT_PIN 9
#define LED_INDICATOR_PIN 20

// ADSBee Configuration
#define SERIAL_BAUD 115200
#define SAMPLE_RATE 2000000  // 2 MHz sampling rate
#define TIMER_PRESCALER 64
#define TIMER_PERIOD (F_CPU / TIMER_PRESCALER / SAMPLE_RATE)

// ADS-B Protocol Constants
#define ADSB_PREAMBLE_US 8.0
#define ADSB_SHORT_US 0.5
#define ADSB_LONG_US 1.0
#define ADSB_FRAME_LEN 112
#define ADSB_FRAME_BYTES 14

// Buffer sizes
#define SAMPLE_BUFFER_SIZE 1024
#define MESSAGE_BUFFER_SIZE 32

// Thresholds and detection parameters
#define MIN_POWER_THRESHOLD 50
#define PREAMBLE_THRESHOLD 0.7
#define BIT_THRESHOLD 0.3

// ADSBee structures
typedef struct {
  uint8_t data[ADSB_FRAME_BYTES];
  uint32_t timestamp;
  float power;
  bool valid;
  uint8_t errors;
} adsb_message_t;

typedef struct {
  float i_samples[SAMPLE_BUFFER_SIZE];
  float q_samples[SAMPLE_BUFFER_SIZE];
  uint16_t write_idx;
  uint16_t read_idx;
  bool overflow;
} sample_buffer_t;

typedef struct {
  uint32_t total_samples;
  uint32_t messages_detected;
  uint32_t messages_decoded;
  uint32_t crc_errors;
  uint32_t preamble_detects;
  float avg_power;
  uint32_t last_message_time;
} statistics_t;

// Global variables
volatile sample_buffer_t sample_buf;
adsb_message_t message_buffer[MESSAGE_BUFFER_SIZE];
uint8_t msg_write_idx = 0;
uint8_t msg_read_idx = 0;
statistics_t stats;

// AGC variables
float agc_gain = 1.0;
float agc_target = 0.3;
float agc_alpha = 0.001;

// Timing variables
volatile uint32_t last_sample_time = 0;
volatile bool new_samples = false;

// Lookup tables for performance optimization
float magnitude_lut[256];
uint32_t crc_table[256];

void setup() {
  // Initialize serial communications
  Serial.begin(SERIAL_BAUD);
  Serial1.begin(SERIAL_BAUD);

  Serial.println("ADSBee 1090 MHz Receiver v0.8.0-rc3");
  Serial.println("Initializing for RP2040...");

  // Initialize pins
  pinMode(ADS_B_INPUT_PIN, INPUT);
  pinMode(SIGNAL_LEVEL_PIN, INPUT);
  pinMode(PWM_OUTPUT_PIN, OUTPUT);
  pinMode(LED_INDICATOR_PIN, OUTPUT);

  // Initialize PWM for AGC
  analogWriteResolution(12); // 12-bit PWM for better resolution
  analogWrite(PWM_OUTPUT_PIN, 2048); // Start at mid-range

  // Initialize lookup tables
  init_magnitude_lut();
  init_crc_table();

  // Initialize sample buffer
  memset((void*)&sample_buf, 0, sizeof(sample_buffer_t));

  // Initialize statistics
  memset(&stats, 0, sizeof(statistics_t));

  // Setup timer for sampling (using RP2040 hardware timer)
  setup_sampling_timer();

  // Setup ADC for signal input
  setup_adc();

  digitalWrite(LED_INDICATOR_PIN, LOW);

  Serial.println("ADSBee initialization complete");
  Serial.println("Commands: 'stats', 'gain <value>', 'threshold <value>'");
}

void loop() {
  // Process new samples if available
  if (new_samples) {
    process_samples();
    new_samples = false;
  }

  // Process decoded messages
  process_messages();

  // Handle serial commands
  handle_serial_commands();

  // Update AGC
  update_agc();

  // Update status LED
  update_status_led();

  // Small delay to prevent watchdog issues
  delayMicroseconds(10);
}

// Initialize magnitude lookup table for I/Q processing
void init_magnitude_lut() {
  for (int i = 0; i < 256; i++) {
    float val = (i - 128) / 128.0;
    magnitude_lut[i] = val * val;
  }
}

// Initialize CRC-24 lookup table
void init_crc_table() {
  const uint32_t poly = 0x1FFF409; // ADS-B CRC polynomial

  for (int i = 0; i < 256; i++) {
    uint32_t crc = i << 16;
    for (int j = 0; j < 8; j++) {
      if (crc & 0x800000) {
        crc = (crc << 1) ^ poly;
      } else {
        crc <<= 1;
      }
    }
    crc_table[i] = crc & 0xFFFFFF;
  }
}

// Setup hardware timer for ADC sampling
void setup_sampling_timer() {
  // Configure Timer0 for regular ADC sampling
  // This is a simplified version - actual implementation depends on RP2040 SDK

  // For now, we'll use a simple interrupt-based approach
  attachInterrupt(digitalPinToInterrupt(ADS_B_INPUT_PIN), sample_isr, CHANGE);
}

// Setup ADC for signal acquisition
void setup_adc() {
  analogReadResolution(12); // 12-bit ADC resolution

  // Configure ADC for faster sampling if possible
  // RP2040 specific optimizations would go here
}

// Interrupt service routine for sampling
void sample_isr() {
  static uint32_t last_time = 0;
  uint32_t current_time = micros();

  // Rate limiting
  if (current_time - last_time < 1) return;
  last_time = current_time;

  // Read I and Q samples (simulated from single ADC)
  uint16_t adc_val = analogRead(SIGNAL_LEVEL_PIN);

  // Convert to I/Q (simplified - normally would need proper SDR)
  float i_sample = (adc_val - 2048) / 2048.0 * agc_gain;
  float q_sample = 0; // For single ADC, Q is zero

  // Store in circular buffer
  uint16_t next_idx = (sample_buf.write_idx + 1) % SAMPLE_BUFFER_SIZE;
  if (next_idx != sample_buf.read_idx) {
    sample_buf.i_samples[sample_buf.write_idx] = i_sample;
    sample_buf.q_samples[sample_buf.write_idx] = q_sample;
    sample_buf.write_idx = next_idx;
    new_samples = true;
  } else {
    sample_buf.overflow = true;
  }

  stats.total_samples++;
}

// Process samples for ADS-B detection
void process_samples() {
  while (sample_buf.read_idx != sample_buf.write_idx) {
    float magnitude = calculate_magnitude(sample_buf.read_idx);

    // Update power statistics
    stats.avg_power = stats.avg_power  0.999 + magnitude  0.001;

    // Detect preamble
    if (detect_preamble(sample_buf.read_idx)) {
      stats.preamble_detects++;

      // Try to decode message
      adsb_message_t msg;
      if (decode_message(sample_buf.read_idx, &msg)) {
        // Store decoded message
        store_message(&msg);
        stats.messages_decoded++;
        digitalWrite(LED_INDICATOR_PIN, HIGH);
      }
    }

    sample_buf.read_idx = (sample_buf.read_idx + 1) % SAMPLE_BUFFER_SIZE;
  }
}

// Calculate magnitude from I/Q samples
float calculate_magnitude(uint16_t idx) {
  float i = sample_buf.i_samples[idx];
  float q = sample_buf.q_samples[idx];
  return sqrt(i  i + q  q);
}

// Detect ADS-B preamble
bool detect_preamble(uint16_t start_idx) {
  const float preamble_pattern[16] = {
    1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0
  };

  float correlation = 0;
  float power = 0;

  // Cross-correlate with expected preamble
  for (int i = 0; i < 16; i++) {
    uint16_t idx = (start_idx + i) % SAMPLE_BUFFER_SIZE;
    float mag = calculate_magnitude(idx);

    correlation += mag * preamble_pattern[i];
    power += mag * mag;
  }

  if (power < MIN_POWER_THRESHOLD) return false;

  float norm_correlation = correlation / sqrt(power);
  return norm_correlation > PREAMBLE_THRESHOLD;
}

// Decode ADS-B message
bool decode_message(uint16_t start_idx, adsb_message_t* msg) {
  memset(msg, 0, sizeof(adsb_message_t));
  msg->timestamp = millis();

  // Skip preamble (16 samples)
  uint16_t data_start = (start_idx + 16) % SAMPLE_BUFFER_SIZE;

  // Decode 112 data bits using Manchester decoding
  uint8_t bit_count = 0;
  uint8_t byte_idx = 0;
  uint8_t bit_idx = 0;

  for (int i = 0; i < ADSB_FRAME_LEN * 2 && bit_count < ADSB_FRAME_LEN; i += 2) {
    uint16_t idx1 = (data_start + i) % SAMPLE_BUFFER_SIZE;
    uint16_t idx2 = (data_start + i + 1) % SAMPLE_BUFFER_SIZE;

    float mag1 = calculate_magnitude(idx1);
    float mag2 = calculate_magnitude(idx2);

    // Manchester decoding: high-low = 1, low-high = 0
    bool bit_value;
    if (mag1 > mag2 + BIT_THRESHOLD) {
      bit_value = 1;
    } else if (mag2 > mag1 + BIT_THRESHOLD) {
      bit_value = 0;
    } else {
      msg->errors++;
      bit_value = mag1 > mag2; // Best guess
    }

    // Store bit in message
    if (bit_value) {
      msg->data[byte_idx] |= (1 << (7 - bit_idx));
    }

    bit_idx++;
    if (bit_idx == 8) {
      bit_idx = 0;
      byte_idx++;
    }
    bit_count++;
  }

  // Calculate message power
  msg->power = 0;
  for (int i = 0; i < ADSB_FRAME_LEN * 2; i++) {
    uint16_t idx = (data_start + i) % SAMPLE_BUFFER_SIZE;
    msg->power += calculate_magnitude(idx);
  }
  msg->power /= (ADSB_FRAME_LEN * 2);

  // Validate CRC
  msg->valid = validate_crc24(msg->data);
  if (!msg->valid) {
    stats.crc_errors++;
  }

  return true;
}

// Validate ADS-B CRC-24
bool validate_crc24(uint8_t* data) {
  uint32_t crc = 0;

  // Calculate CRC for first 88 bits (11 bytes)
  for (int i = 0; i < 11; i++) {
    crc ^= data[i] << 16;
    for (int j = 0; j < 8; j++) {
      if (crc & 0x800000) {
        crc = (crc << 1) ^ 0x1FFF409;
      } else {
        crc <<= 1;
      }
    }
  }

  // Compare with received CRC
  uint32_t received_crc = (data[11] << 16) | (data[12] << 8) | data[13];
  return (crc & 0xFFFFFF) == received_crc;
}

// Store decoded message in buffer
void store_message(adsb_message_t* msg) {
  uint8_t next_idx = (msg_write_idx + 1) % MESSAGE_BUFFER_SIZE;
  if (next_idx != msg_read_idx) {
    memcpy(&message_buffer[msg_write_idx], msg, sizeof(adsb_message_t));
    msg_write_idx = next_idx;
    stats.messages_detected++;
    stats.last_message_time = millis();
  }
}

// Process decoded messages
void process_messages() {
  while (msg_read_idx != msg_write_idx) {
    adsb_message_t* msg = &message_buffer[msg_read_idx];

    if (msg->valid) {
      output_message(msg);
    }

    msg_read_idx = (msg_read_idx + 1) % MESSAGE_BUFFER_SIZE;
  }
}

// Output message in SBS format
void output_message(adsb_message_t* msg) {
  uint8_t df = (msg->data[0] >> 3) & 0x1F;
  uint32_t icao = ((uint32_t)msg->data[1] << 16) |
                  ((uint32_t)msg->data[2] << 8) |
                  msg->data[3];

  // Basic SBS format output
  Serial1.print("MSG,");
  Serial1.print(df);
  Serial1.print(",");
  Serial1.print(icao, HEX);
  Serial1.print(",");
  Serial1.print(msg->timestamp);
  Serial1.print(",");
  Serial1.print(msg->power, 2);

  // Decode specific message types
  if (df == 17 || df == 18) {
    decode_extended_squitter(msg);
  }

  Serial1.println();

  // Debug output
  Serial.print("Decoded: DF=");
  Serial.print(df);
  Serial.print(" ICAO=");
  Serial.print(icao, HEX);
  Serial.print(" PWR=");
  Serial.print(msg->power, 2);
  Serial.print(" ERR=");
  Serial.println(msg->errors);
}

// Decode ADS-B Extended Squitter
void decode_extended_squitter(adsb_message_t* msg) {
  uint8_t tc = (msg->data[4] >> 3) & 0x1F;

  Serial1.print(",TC=");
  Serial1.print(tc);

  switch (tc) {
    case 1: case 2: case 3: case 4: // Aircraft identification
      decode_identification(msg);
      break;
    case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18:
      decode_airborne_position(msg);
      break;
    case 19: // Airborne velocity
      decode_airborne_velocity(msg);
      break;
    case 5: case 6: case 7: case 8: // Surface position
      decode_surface_position(msg);
      break;
  }
}

// Decode aircraft identification
void decode_identification(adsb_message_t* msg) {
  const char charset[] = "#ABCDEFGHIJKLMNOPQRSTUVWXYZ##### ###############0123456789######";
  char callsign[9] = {0};

  uint64_t data = 0;
  for (int i = 5; i < 11; i++) {
    data = (data << 8) | msg->data[i];
  }

  for (int i = 0; i < 8; i++) {
    int index = (data >> (42 - i * 6)) & 0x3F;
    callsign[i] = (index < 64) ? charset[index] : '?';
  }

  Serial1.print(",CALL=");
  Serial1.print(callsign);
}

// Decode airborne position
void decode_airborne_position(adsb_message_t* msg) {
  uint16_t altitude = ((msg->data[5] & 0xFF) << 4) |
                      ((msg->data[6] & 0xF0) >> 4);
  bool odd_flag = (msg->data[6] >> 2) & 1;

  uint32_t lat_cpr = ((msg->data[6] & 0x03) << 15) |
                     (msg->data[7] << 7) |
                     (msg->data[8] >> 1);
  uint32_t lon_cpr = ((msg->data[8] & 0x01) << 16) |
                     (msg->data[9] << 8) |
                     msg->data[10];

  Serial1.print(",ALT=");
  Serial1.print(altitude * 25);
  Serial1.print(",");
  Serial1.print(odd_flag ? "ODD" : "EVEN");
  Serial1.print(",LAT=");
  Serial1.print(lat_cpr);
  Serial1.print(",LON=");
  Serial1.print(lon_cpr);
}

// Decode airborne velocity
void decode_airborne_velocity(adsb_message_t* msg) {
  uint8_t subtype = msg->data[4] & 0x07;

  if (subtype == 1 || subtype == 2) {
    uint16_t ew_vel = ((msg->data[5] & 0x03) << 8) | msg->data[6];
    uint16_t ns_vel = ((msg->data[7] & 0x7F) << 3) | ((msg->data[8] & 0xE0) >> 5);

    Serial1.print(",VEL_EW=");
    Serial1.print(ew_vel);
    Serial1.print(",VEL_NS=");
    Serial1.print(ns_vel);
  }
}

// Decode surface position (placeholder)
void decode_surface_position(adsb_message_t* msg) {
  Serial1.print(",SURFACE");
}

// Update AGC based on signal level
void update_agc() {
  static uint32_t last_agc_update = 0;
  uint32_t current_time = millis();

  if (current_time - last_agc_update >= 100) { // Update every 100ms
    last_agc_update = current_time;

    // Simple AGC algorithm
    float error = agc_target - stats.avg_power;
    agc_gain += error * agc_alpha;
    agc_gain = constrain(agc_gain, 0.1, 10.0);

    // Convert to PWM value
    uint16_t pwm_val = (uint16_t)(agc_gain * 409.6); // Scale to 12-bit PWM
    pwm_val = constrain(pwm_val, 0, 4095);
    analogWrite(PWM_OUTPUT_PIN, pwm_val);
  }
}

// Update status LED
void update_status_led() {
  static uint32_t last_blink = 0;
  static bool led_state = false;
  uint32_t current_time = millis();

  // Blink LED based on message rate
  uint32_t time_since_msg = current_time - stats.last_message_time;

  if (time_since_msg < 1000) {
    // Recent message - fast blink
    if (current_time - last_blink >= 100) {
      led_state = !led_state;
      digitalWrite(LED_INDICATOR_PIN, led_state);
      last_blink = current_time;
    }
  } else if (time_since_msg < 5000) {
    // No recent messages - slow blink
    if (current_time - last_blink >= 500) {
      led_state = !led_state;
      digitalWrite(LED_INDICATOR_PIN, led_state);
      last_blink = current_time;
    }
  } else {
    // No messages - LED off
    digitalWrite(LED_INDICATOR_PIN, LOW);
  }
}

// Handle serial commands
void handle_serial_commands() {
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim();
    command.toLowerCase();

    if (command == "stats") {
      print_statistics();
    } else if (command.startsWith("gain ")) {
      float new_gain = command.substring(5).toFloat();
      agc_gain = constrain(new_gain, 0.1, 10.0);
      Serial.print("AGC gain set to: ");
      Serial.println(agc_gain, 3);
    } else if (command.startsWith("threshold ")) {
      float new_threshold = command.substring(10).toFloat();
      agc_target = constrain(new_threshold, 0.1, 1.0);
      Serial.print("AGC target set to: ");
      Serial.println(agc_target, 3);
    } else if (command == "reset") {
      memset(&stats, 0, sizeof(statistics_t));
      Serial.println("Statistics reset");
    } else if (command == "help") {
      print_help();
    } else {
      Serial.println("Unknown command. Type 'help' for available commands.");
    }
  }
}

// Print statistics
void print_statistics() {
  Serial.println("=== ADSBee Statistics ===");
  Serial.print("Total samples: ");
  Serial.println(stats.total_samples);
  Serial.print("Preamble detections: ");
  Serial.println(stats.preamble_detects);
  Serial.print("Messages detected: ");
  Serial.println(stats.messages_detected);
  Serial.print("Messages decoded: ");
  Serial.println(stats.messages_decoded);
  Serial.print("CRC errors: ");
  Serial.println(stats.crc_errors);
  Serial.print("Average power: ");
  Serial.println(stats.avg_power, 4);
  Serial.print("AGC gain: ");
  Serial.println(agc_gain, 3);
  Serial.print("Sample buffer overflow: ");
  Serial.println(sample_buf.overflow ? "YES" : "NO");
  Serial.print("Last message: ");
  Serial.print(millis() - stats.last_message_time);
  Serial.println(" ms ago");
}

// Print help
void print_help() {
  Serial.println("=== ADSBee Commands ===");
  Serial.println("stats              - Show statistics");
  Serial.println("gain <value>       - Set AGC gain (0.1-10.0)");
  Serial.println("threshold <value>  - Set AGC target (0.1-1.0)");
  Serial.println("reset              - Reset statistics");
  Serial.println("help               - Show this help");
}


Основные адаптации для RP2040:

Структура проекта
Полная переработка для Arduino IDE
Использование стандартных библиотек Arduino
Оптимизация для RP2040

Ключевые особенности
Реализация буферов для сэмплов
Manchester декодирование
CRC-24 валидация
Автоматическое управление усилением (AGC)
SBS формат вывода

Производительность
Lookup tables для быстрых вычислений
Circular buffers для эффективного использования памяти
Interrupt-driven sampling

Функциональность
Детектирование преамбулы ADS-B
Декодирование различных типов сообщений
Статистика работы
Командный интерфейс

Настройки
Регулируемые пороги детектирования
Настройка AGC
Мониторинг качества сигнала

Эта адаптация сохраняет основную функциональность ADSBee, но оптимизирована для работы в среде Arduino IDE на микроконтроллере RP2040.